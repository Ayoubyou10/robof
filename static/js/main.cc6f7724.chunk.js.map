{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAgBeA,EAdF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,6BACC,4BAAKF,GACL,2BAAIC,MCiBOK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACA,6BAEKA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCFVW,EARG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCK5FI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCiDKC,G,wDA9Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRM,YAAa,IAJD,E,gEAQO,IAAD,OACnBmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAS,EAAKR,SAAS,CAAErB,OAAQ6B,S,+BAU/B,IAAD,OACAC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAC,GAChD,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAGlE,OAA+B,IAA5BH,KAAKP,MAAMxB,OAAOoC,OACb,uCAGR,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACD,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC7B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ8B,IADnB,a,GAlCeO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cc6f7724.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t<div>\r\n\t\t{\r\n    \t\trobots.map((user, i) => {\r\n\t\t\t\treturn ( \r\n\t\t \t\t\t<Card\r\n\t\t  \t\t\t\tkey={i}\r\n\t\t  \t\t\t\tid={robots[i].id} \r\n\t\t  \t\t\t\tname={robots[i].name} \r\n\t\t  \t\t\t\temail={robots[i].email} \r\n\t\t  \t\t\t\t/>\r\n\t\t \t\t\t);\r\n\t\t\t\t})\r\n    \t}\r\n    </div>\r\n    );\r\n}\r\n\r\n// about key : it's a special key!in react virtual DOM keeps trash of what our cards are ! but without\r\n// having something called a key prop if some of these cards get deleted react won't know which one and it ll have to change\r\n// the entire DOM vs if it had a key prop that says 'oh this one gets moved i can just move it from the DOM, remember it when u use the loop'\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;\r\n// onChange is used in Html onchange occurs when the element loses focus, after the content has been changed.in an Input","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}> \r\n\t \t{props.children} \r\n\t \t </div>\r\n\t \t );// before we were able to wrap lowercase components like h1 h2 ! but with children we can wrap also components like Scroll \r\n};// when we use css in a js file we use {{}} and instead of overflow-y in css we use overflowY\r\n// and now we are able to scroll down and our SearchBox is still present all the way long\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() { // if we want to declare the state we need to use constructor\r\n\t\tsuper()\r\n\t\tthis.state = { // state is something that can change and affect our app (affect our webpage when using it ! like in this example ! using it with the searchbox it affects our CardList)\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t .then(response=> response.json()) // we are getting the name and username from another site ! connecting to another server we get the infos from there using fetch\r\n\t\t .then(users=> {this.setState({ robots: users})});\r\n\t}\r\n\r\n\tonSearchChange = (event) => { // when we are typing in the search engine we want our app to react to import\r\n\t\tthis.setState({ searchfield: event.target.value }) // anytime you wanna change state to another parameter\r\n // if the name of the robots in lowercase includes then only return the robots that returns true\r\n\t\t// remember with an event you always have event.target.value which should give us the value of what we're searching\r\n\t}\r\n\r\n// we use this.onSearchChange because it's an object that we re working in so 'this' is required\r\n\trender() {\r\n\t\t\t\tconst filteredRobots = this.state.robots.filter(robot =>{ // by using this.state.robots we can access to the robots from the cardlist not from the robots file\r\n\t\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());// if the name of the robots in lowercase includes then only return the robots that returns true\r\n\t\t\t})\r\n\r\n\t\tif(this.state.robots.length ===0) {\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>robofriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange} /> \r\n\t\t\t<Scroll> \r\n\t\t\t\t<CardList robots={filteredRobots} />  // \r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t\t// we want to be scrolling our searchbox when we go down, so we re putting scroll around our CardList to wrap the cardlist\r\n\t\t// now CardList can be scrollable\r\n\t\t// so we're telling Scroll to render whatever's inside it how ? ! go to Scroll.js\r\n\t\t// scroll can use 'children' as a way to render its children (what's inside it)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n//we have our App Component that has 2 states : robots and searchfield \r\n//and because App owns the state, any Component that has 'state' uses\r\n//the class syntax so they can use the 'constructor' function to create\r\n//'this.state', and this 'state is what changes in an app, it's what\r\n//describes the app.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { robots } from './robots';\nReactDOM.render(\n  <React.StrictMode>\n  \t<App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}